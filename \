package models

import (
	"math"
	"time"
)

const halfLifeDecay = 0.693

type (
	Score float64
	Age   int64
)

type Directory struct {
	Path      string
	LastVisit Age
	Score     Score
}

// NewDirecotry creates a new Directory instance with the given path, current time as LastVisit, and a default frecency score.
func NewDirecotry(path string) *Directory {
	return &Directory{
		path,
		Age(time.Now().Unix()),
		Score(1), // NOTE: evaluate optimal default weight
	}
}

// UpdateLastVisit updates the LastVisit field of the Directory instance to the current time.
func UpdateLastVisit(dir *Directory) {
	dir.LastVisit = Age(time.Now().Unix())
}

// UpdateScore updates the Score field of the Directory instance by multiplying it by 2.
func UpdateScore(dir *Directory) {
	dir.Score *= 2
}

// WeighFrecency calculates the frecency score of a Directory instance based on its LastVisit time and Score.
func WeighFrecency(dir *Directory) float64 {
	lastVisitTime := time.Unix(int64(dir.LastVisit), 0) // Convert age to int64 then to time.Time

	elapsedTime := time.Since(lastVisitTime)

	elapsedDays := elapsedTime.Hours() / 24.0

	decayFactor := math.Exp(-0.693 * elapsedDays)

	// Return the frecency score
	return float64(dir.Score) * decayFactor
}
